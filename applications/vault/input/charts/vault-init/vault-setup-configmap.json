{
    "apiVersion": "v1",
    "data": {
        "vault-setup.sh": "#!/bin/bash\nset -o pipefail\n\nreadonly RED='\\033[0;31m'\nreadonly GREEN='\\033[0;32m'\nreadonly ORANGE='\\033[38;5;214m'\nreadonly NC='\\033[0m' # No Color\n\nexport HOME=/tmp\n\nANSIBLE_VAULT_SECRET=$(cat /tmp/secrets/ANSIBLE_VAULT_SECRET)\nif [ -z \"${ANSIBLE_VAULT_SECRET}\" ]; then\n    echo -e \"ðŸ•±${RED}Failed - to get secret ANSIBLE_VAULT_SECRET ?${NC}\"\n    exit 1\nfi\n\nENVIRONMENT=${ENVIRONMENT:-roadshow}\nif [ -z \"${ENVIRONMENT}\" ]; then\n    echo -e \"ðŸ•±${RED}Failed - to get secret ENVIRONMENT ?${NC}\"\n    exit 1\nfi\n\nexport CLUSTER_DOMAIN=$(oc get ingress.config/cluster -o 'jsonpath={.spec.domain}')\nexport BASE_DOMAIN=$(oc get dns cluster -o jsonpath='{.spec.baseDomain}')\n\nwait_for_project() {\n    local i=0\n    local project=\"$1\"\n    STATUS=$(oc get project $project -o=go-template --template='{{ .status.phase }}')\n    until [ \"$STATUS\" == \"Active\" ]\n    do\n        echo -e \"${GREEN}Waiting for project $project.${NC}\"\n        sleep 5\n        ((i=i+1))\n        if [ $i -gt 300 ]; then\n            echo -e \"ðŸš¨${RED}Failed waiting for project $project never Succeeded?.${NC}\"\n            exit 1\n        fi\n        STATUS=$(oc get project $project -o=go-template --template='{{ .status.phase }}')\n    done\n    echo \"ðŸŒ´ wait_for_project $project ran OK\"\n}\nwait_for_project vault\n\nwait_for_vault_pod () {\n    echo \"ðŸ’¥ Waiting for vault pod ...\"\n    local i=0\n    STATUS=$(oc get pod vault-0 -n vault -o jsonpath='{.status.phase}')\n    until [ \"$STATUS\" == \"Running\" ]\n    do\n        echo -e \"${GREEN}Waiting for 0 rc from oc commands.${NC}\"\n        ((i=i+1))\n        if [ $i -gt 300 ]; then\n            echo -e \"ðŸ•±${RED}Failed - oc never ready?.${NC}\"\n            exit 1\n        fi\n        sleep 5\n        STATUS=$(oc get pod vault-0 -n vault -o jsonpath='{.status.phase}')\n    done\n    echo \"ðŸ’¥ Waiting for vault pod ran OK\"\n}\nwait_for_vault_pod\n\ncheck_done() {\n    echo \"ðŸŒ´ Running check_done...\"\n    STATUS=$(oc -n vault get $(oc get pods -n vault -l app.kubernetes.io/instance=vault -o name) -o=jsonpath='{.status.conditions[?(@.type==\"Ready\")].status}')\n    if [ \"$STATUS\" != \"True\" ]; then\n      echo -e \"ðŸ’€${ORANGE}Warn - check_done not ready for vault, continuing ${NC}\"\n      return 1\n    else\n      echo \"ðŸŒ´ check_done ran OK\"\n    fi\n    return 0\n}\n\nif check_done; then\n    echo -e \"\\nðŸŒ»${GREEN}Vault setup OK.${NC}ðŸŒ»\\n\"\n    exit 0;\nfi\n\ninit () {\n    echo \"ðŸ’¥ Init Vault...\"\n    local i=0\n    oc -n vault exec vault-0 -- vault operator init -key-threshold=1 -key-shares=1 -tls-skip-verify 2\u003e\u00261 | tee /tmp/vault-init-${ENVIRONMENT}\n    until [ \"${PIPESTATUS[0]}\" == 0 ]\n    do\n        echo -e \"${GREEN}Waiting for 0 rc from oc commands.${NC}\"\n        ((i=i+1))\n        if [ $i -gt 100 ]; then\n            echo -e \"ðŸ•±${RED}Failed - vault init never ready?.${NC}\"\n            exit 1\n        fi\n        sleep 10\n        oc -n vault exec vault-0 -- vault operator init -key-threshold=1 -key-shares=1 -tls-skip-verify 2\u003e\u00261 | tee /tmp/vault-init-${ENVIRONMENT}\n    done\n    echo \"ðŸ’¥ Init Vault Done\"\n}\ninit\n\nexport UNSEAL_KEY=$(cat /tmp/vault-init-${ENVIRONMENT} | grep -e 'Unseal Key 1' | awk '{print $4}')\nif [ -z \"$UNSEAL_KEY\" ]; then\n    echo -e \"ðŸ•±${RED}Failed - to extract unseal key from vault init output${NC}\"\n    exit 1\nfi\nexport ROOT_TOKEN=$(cat /tmp/vault-init-${ENVIRONMENT} | grep -e 'Initial Root Token' | awk '{print $4}')\nif [ -z \"$ROOT_TOKEN\" ]; then\n    echo -e \"ðŸ•±${RED}Failed - to get root token ?${NC}\"\n    exit 1\nfi\nrm -f /tmp/vault-init-${ENVIRONMENT} 2\u003e\u00261\u003e/dev/null\n\noc create secret generic vault-unseal --from-literal=password=${UNSEAL_KEY} -n vault\nif [ \"$?\" != 0 ]; then\n    echo -e \"ðŸ•±${RED}Failed - to create vault-unseal secret ${NC}\"\n    exit 1\nfi\n\noc create secret generic vault-root-token --from-literal=password=${ROOT_TOKEN} -n vault\nif [ \"$?\" != 0 ]; then\n    echo -e \"ðŸ•±${RED}Failed - to create vault-root-token secret ${NC}\"\n    exit 1\nfi\n\nunseal() {\n    echo \"ðŸ’¥ Unseal Vault...\"\n    local i=0\n    oc -n vault exec vault-0 -- vault operator unseal -tls-skip-verify $UNSEAL_KEY\n    until [ \"$?\" == 0 ]\n    do\n        echo -e \"${GREEN}Waiting for 0 rc from oc commands.${NC}\"\n        ((i=i+1))\n        if [ $i -gt 30 ]; then\n            echo -e \"ðŸ•±${RED}Failed - to unseal vault ?${NC}\"\n            exit 1\n        fi\n        sleep 5\n        oc -n vault exec vault-0 -- vault operator unseal -tls-skip-verify $UNSEAL_KEY\n    done\n    echo \"ðŸ’¥ Unseal Vault Done\"\n}\nunseal\n\nexport VAULT_ROUTE=vault.vault.svc.cluster.local:8200\nexport VAULT_ADDR=https://${VAULT_ROUTE}\nexport VAULT_SKIP_VERIFY=true\n\nlogin() {\n    echo \"ðŸ’¥ Login Vault...\"\n    local i=0\n    vault login token=${ROOT_TOKEN}\n    until [ \"$?\" == 0 ]\n    do\n        echo -e \"${GREEN}Waiting for 0 rc from oc commands.${NC}\"\n        ((i=i+1))\n        if [ $i -gt 100 ]; then\n            echo -e \"ðŸ•±${RED}Failed - to login to vault ?${NC}\"\n            exit 1\n        fi\n        sleep 10\n        vault login token=${ROOT_TOKEN}\n    done\n    echo \"ðŸ’¥ Login Vault Done\"\n}\nlogin\n\nexport APP_NAME=vault\nexport PROJECT_NAME=openshift-gitops\n\nvault auth enable -path=$CLUSTER_DOMAIN-${PROJECT_NAME} kubernetes\n\nvault policy write $CLUSTER_DOMAIN-$PROJECT_NAME-kv-read -\u003c\u003c EOF\npath \"kv/data/ocp/${CLUSTER_NAME}/*\" {\ncapabilities=[\"read\",\"list\"]\n}\nEOF\n\nvault secrets enable -path=kv/ -version=2 kv\n\nvault write auth/$CLUSTER_DOMAIN-$PROJECT_NAME/role/$APP_NAME \\\nbound_service_account_names=$APP_NAME \\\nbound_service_account_namespaces=$PROJECT_NAME \\\npolicies=$CLUSTER_DOMAIN-$PROJECT_NAME-kv-read \\\nperiod=120s\n\nCA_CRT=$(openssl s_client -showcerts -connect api.${CLUSTER_NAME}.${BASE_DOMAIN}:6443 2\u003e\u00261 | awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/ {print $0}')\n\nvault write auth/$CLUSTER_DOMAIN-${PROJECT_NAME}/config \\\nkubernetes_host=\"$(oc whoami --show-server)\" \\\nkubernetes_ca_cert=\"$CA_CRT\"\n\nwget -P /tmp https://raw.githubusercontent.com/eformat/rhoai-cluster-pool/refs/heads/main/secrets/vault-${ENVIRONMENT}\nif [ ! -f \"/tmp/vault-${ENVIRONMENT}\" ]; then\n    echo -e \"ðŸ•±${RED}Failed - to get secret file ?${NC}\"\n    exit 1\nfi\nrm -f /tmp/vault-init-${ENVIRONMENT} 2\u003e\u00261\u003e/dev/null\n\nansible-vault decrypt /tmp/vault-${ENVIRONMENT} --vault-password-file \u003c(echo \"$ANSIBLE_VAULT_SECRET\")\nsh /tmp/vault-${ENVIRONMENT} $ROOT_TOKEN\nif [ \"$?\" != 0 ]; then\n    echo -e \"ðŸ•±${RED}Failed - to hydrate secrets ${NC}\"\n    exit 1\nfi\n\ncreate_vault_unseal_job() {\n    echo \"ðŸ’¥ Create vault unseal job\"\n\n    wget -P /tmp https://raw.githubusercontent.com/eformat/rhoai-cluster-pool/refs/heads/main/bootstrap/vault-unseal-cronjob.yaml\n    if [ ! -f \"/tmp/vault-unseal-cronjob.yaml\" ]; then\n        echo -e \"ðŸ•±${RED}Failed - to get cronjob file ?${NC}\"\n        exit 1\n    fi\n\n    cat /tmp/vault-unseal-cronjob.yaml | envsubst | oc apply -f-\n    until [ \"${PIPESTATUS[2]}\" == 0 ]\n    do\n        echo -e \"${GREEN}Waiting for 0 rc from oc commands.${NC}\"\n        ((i=i+1))\n        if [ $i -gt 50 ]; then\n            echo -e \"ðŸ•±${RED}Failed - vault unseal job never done ?.${NC}\"\n            exit 1\n        fi\n        sleep 10\n        cat /tmp/vault-unseal-cronjob.yaml | envsubst | oc apply -f-\n    done\n    echo \"ðŸ’¥ Create vault unseal job Done\"\n}\ncreate_vault_unseal_job\n\necho -e \"\\nðŸŒ»${GREEN}Vault setup OK.${NC}ðŸŒ»\\n\"\nexit 0"
    },
    "kind": "ConfigMap",
    "metadata": {
        "name": "vault-init",
        "namespace": "vault"
    }
}
